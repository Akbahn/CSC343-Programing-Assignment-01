#include <iostream>
#include <vector>
#include <cstdlib>
#include <cmath>
#include <ctime>

using namespace std;

const int MEMORY_SIZE_GB = 16;
const int TOTAL_PAGES = 100;
const int PAGE_SIZE_MB = (MEMORY_SIZE_GB * 1024) / TOTAL_PAGES; // 160MB per page
const int BASE_MEMORY_ADDRESS = 2000;

class MemoryManagementSimulator {
private:
    vector<int> memory;
    int currentAddress;

public:
    MemoryManagementSimulator() : memory(TOTAL_PAGES, 0), currentAddress(BASE_MEMORY_ADDRESS) {
        srand(time(0));
    }

    void userMemoryAllocation() {
        int processId = 1;
        int pageIndex = 0;

        cout << "Process Id      Starting Memory Address      Size of the Process MB         Unused Space MB\n";
        
        while (pageIndex < TOTAL_PAGES) {
            int numPages = rand() % 30 + 1; // Generate number of pages (1 to 30)
            int processSizeMB = numPages * 80;
            int requiredPages = ceil((double)processSizeMB / PAGE_SIZE_MB);
            
            // Not enough memory left
            if (pageIndex + requiredPages > TOTAL_PAGES) {
                break; 
            }
            
            for (int i = 0; i < requiredPages; i++) {
                memory[pageIndex++] = processId;
            }
            
            int totalAllocatedMemory = requiredPages * PAGE_SIZE_MB;
            int unusedMemory = totalAllocatedMemory - processSizeMB;
            
            // Print process details
            printf("%-15d %-30d %-30d %-15d\n", processId, currentAddress, processSizeMB, unusedMemory);
            
            // Move to the next starting address
            currentAddress += totalAllocatedMemory;
            processId++;
        }
    }
};

int main() {
    MemoryManagementSimulator simulator;
    simulator.userMemoryAllocation();
    return 0;
}
